// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    conversations Conversation[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Conversation {
    id          String    @id @default(cuid())
    userId      String
    title       String
    summary     String?   @db.Text
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    messages    Message[]
    eventPlans  EventPlan[]

    @@index([userId, createdAt])
}

model Message {
    id             String        @id @default(cuid())
    conversationId String
    role           MessageRole
    content        String        @db.Text
    metadata       Json?
    createdAt      DateTime      @default(now())
    conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)

    @@index([conversationId, createdAt])
}

model EventPlan {
    id             String        @id @default(cuid())
    conversationId String
    name           String
    description    String?       @db.Text
    location       String?
    currency       String        @default("USD")
    totalBudget    Decimal?      @db.Decimal(12, 2)
    plannedDate    DateTime?
    status         EventStatus   @default(DRAFT)
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    items          BudgetItem[]

    @@index([conversationId])
}

model BudgetItem {
    id            String     @id @default(cuid())
    eventPlanId   String
    title         String
    category      String?
    estimatedCost Decimal?   @db.Decimal(12, 2)
    currency      String     @default("USD")
    quantity      Int        @default(1)
    unit          String?
    sourceUrl     String?
    sourceName    String?
    notes         String?    @db.Text
    isConfirmed   Boolean    @default(false)
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    eventPlan     EventPlan  @relation(fields: [eventPlanId], references: [id], onDelete: Cascade)

    @@index([eventPlanId])
}

enum MessageRole {
    USER
    ASSISTANT
    SYSTEM
    TOOL
}

enum EventStatus {
    DRAFT
    ACTIVE
    COMPLETED
    ARCHIVED
}
